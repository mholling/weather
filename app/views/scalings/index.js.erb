var app = {
  init: function() {
    this.date.init();
    this.tabs.init();
    this.charts.init();
  },
  
  date: {
    init: function() {
      jQuery.getJSON('<%= observation_range_path(:format => :json) %>', function(range) {
        var options = {
          changeMonth: true,
          changeYear: true,
          firstDay: 1,
          minDate: new Date(range.minDate),
          maxDate: new Date(range.maxDate),
          onSelect: function(dateText, inst) {
            app.date.changed();
          }
        };
        $('#date').datepicker(options);
        app.date.changed(app.tabs.selected());
      });
    },
    
    changed: function() {
      app.charts.reset();
    },
    
    string: function() {
      return $('#date').datepicker('getDate').toDateString();
    }
  },
  
  tabs: {
    init: function() {
      $('#tabs').tabs({
        select: function(event, ui) {
          app.charts.tabbed(ui.index);
        }
      });
    },
    
    selected: function() {
      return $('#tabs').tabs('option', 'selected');
    }
  },
  
  charts: {
    init: function() {
      $('.scaling').bind('plotselected', function(event, ranges) {
        $(event.target).closest('.scale').each(function(m, scale) {
          $(scale).children('.scaling').each(function(n, scaling) {
            app.charts[scale.id][scaling.id].zoom(ranges);
          });
        });
      });
      $('.scaling').bind('click', function(event) {
        $(event.target).closest('.scale').each(function(m, scale) {
          $(scale).children('.scaling').each(function(n, scaling) {
            app.charts[scale.id][scaling.id].draw();
          });
        });
      });
      $('.scaling').bind('plothover', function(event, position, item) {
        app.charts.hover.show(item);
      });
    },
        
    hover: {
      dataIndex: null,
      seriesIndex: null,

      show: function(item) {
        if (item) {
          if (app.charts.hover.dataIndex != item.dataIndex || app.charts.hover.seriesIndex != item.seriesIndex) {
            app.charts.hover.dataIndex = item.dataIndex;
            app.charts.hover.seriesIndex = item.seriesIndex;
            var time = new Date(item.datapoint[0]);
            var value = item.datapoint[1];
            app.charts.hover.showToolTip(item.pageX, item.pageY, time, value);
          };
        } else {
          app.charts.hover.dataIndex = null;
          app.charts.hover.seriesIndex = null;
          app.charts.hover.hideToolTip();
        };
      },
    
      showToolTip: function(pageX, pageY, time, value) {
        app.charts.hover.hideToolTip();
        $('<div id="tooltip">' + value.toFixed(1) + '</div>').css( {
          position: 'absolute',
          display: 'none',
          top: pageY - 30,
          left: pageX,
          padding: '5px',
          'background-color': '#ff4',
          opacity: 0.80
        }).appendTo('body').fadeIn(200);
      },
    
      hideToolTip: function() {
        $('#tooltip').remove();
      },
    },
    
    <%- @scalings.group_by(&:scale).each_with_index do |(scale, scalings), index| -%>
      <%= dom_id(scale) %>: {
        <%- scalings.each do |scaling| -%>
          <%= dom_id(scaling) %>: {
            data: null,
            options: null,
            
            reload: function() {
              var url = '<%= scaling_path(scaling, :format => :json) %>?date='+encodeURI(app.date.string());
              jQuery.getJSON(url, function(result) {
                $('#<%= dom_id(scaling)%>').empty();
                app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.data = result.data;
                app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.options = result.options;
                app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.draw();
              });      
            },
            
            draw: function() {
              $.plot($('#<%= dom_id(scaling) %>'), app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.data, app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.options);
            },
            
            zoom: function(ranges) {
              var options = $.extend(true, {}, app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.options, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to }
              });
              $.plot($('#<%= dom_id(scaling) %>'), app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.data, options)
            }
          },
          
        <%- end -%>
      },
      
    <%- end -%>

    tabbed: function(tab_index) {
      <%- @scalings.group_by(&:scale).each_with_index do |(scale, scalings), index| -%>
        if (tab_index == <%= index %>) {
          <%- scalings.each do |scaling| -%>
            if (app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.data == null) {
              app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.reload();
            };
          <%- end -%>
        };
      <%- end -%>
    },
    
    reset: function() {
      <%- @scalings.group_by(&:scale).each_with_index do |(scale, scalings), index| -%>
        <%- scalings.each do |scaling| -%>
          app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.data = null;
          app.charts.<%= dom_id(scale) %>.<%= dom_id(scaling) %>.options = null;
        <%- end -%>
      <%- end -%>
      app.charts.tabbed(app.tabs.selected());
    }
  }
};

$(function() {
  app.init();
})

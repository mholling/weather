var app = {
  init: function() {
    this.date.init();
    this.tabs.init();
    this.charts.init();
  },
  
  date: {
    init: function() {
      jQuery.getJSON('<%= observation_range_path(:format => :json) %>', function(range) {
        options = {
          changeMonth: true,
          changeYear: true,
          firstDay: 1,
          minDate: new Date(range.minDate),
          maxDate: new Date(range.maxDate),
          onSelect: app.date.changed
        };
        $('#date').datepicker(options);
        app.date.changed();
      });
    },
    
    changed: function(dateText, inst) {
      app.charts.reset();
    },
    
    string: function() {
      return $('#date').datepicker('getDate').toDateString();
    }
  },
  
  tabs: {
    init: function() {
      $('#tabs').tabs({
        select: app.tabs.selected
      });
    },
    
    selected: function(event, ui) {
      app.charts.loadScale(ui.index);
    },
    
    selectedTab: function() {
      return $('#tabs').tabs('option', 'selected');
    }
  },
  
  charts: {
    init: function() {
      this.zoom.init();
      this.hover.init();
      this.spinners.init();
    },
    
    <%- @scalings.each do |scaling| -%>
      <%= dom_id(scaling) %>: {
        data: null,
        options: null,
        url: '<%= scaling_path(scaling, :format => :json) %>',
      
        tickFormatter: function(value, axis) {
          return value + '<%= scaling.chart.config["units"] %>'
        }
      },
      
    <%- end -%>
      
    reset: function() {
      <%- @scalings.each do |scaling| -%>
        this.<%= dom_id(scaling) %>.data = null;
        this.<%= dom_id(scaling) %>.options = null;
      <%- end -%>
      this.loadScale(app.tabs.selectedTab());
    },

    loadScale: function(tabIndex) {
      this.load($('.scale:eq('+tabIndex+') .scaling'));
    },
    
    load: function(scalings) {
      scalings.each(function(index, scaling) {
        if (app.charts[scaling.id].data == null) {
          url = app.charts[scaling.id].url+'?date='+encodeURI(app.date.string());
          $(scaling).empty();
          jQuery.getJSON(url, function(result) {
            app.charts[scaling.id].data = result.data;
            app.charts[scaling.id].options = result.options;
            app.charts.draw($(scaling));
          });
        };
      });
    },
          
    draw: function(scalings, options) {
      scalings.each(function(index, scaling) {
        opts = $.extend(true, {}, app.charts[scaling.id].options);
        opts = $.extend(true, opts, options || {});
        opts = $.extend(true, opts, {
          yaxis: {
            tickFormatter: app.charts[scaling.id].tickFormatter
          }
        });
        $.plot($(scaling), app.charts[scaling.id].data, opts);
      });
    },
    
    zoom: {
      init: function() {
        $('.scaling').bind('plotselected', function(event, ranges) {
          app.charts.zoom.draw($(event.target).parents('.scale'), ranges);
        });
        $('.scaling').bind('plotunselected', function(event) {
          app.charts.draw($(event.target).parents('.scale').children('.scaling'));
        });
      },
    
      draw: function(scales, ranges) {
        app.charts.draw(scales.children('.scaling'), {
          xaxis: {
            min: ranges.xaxis.from,
            max: ranges.xaxis.to
          }
        });
      }
    },

    hover: {
      dataIndex: null,
      seriesIndex: null,

      init: function() {        
        $('.scaling').bind('plothover', function(event, position, item) {
          app.charts.hover.show(event.target, item);
        });
      },

      show: function(scaling, item) {
        if (item) {
          if (app.charts.hover.dataIndex != item.dataIndex || app.charts.hover.seriesIndex != item.seriesIndex) {
            this.dataIndex = item.dataIndex;
            this.seriesIndex = item.seriesIndex;
            this.showToolTip(scaling, item);
          };
        } else {
          this.dataIndex = null;
          this.seriesIndex = null;
          this.hideToolTip();
        };
      },

      showToolTip: function(scaling, item) {
        for (values = [], n = 1; n < app.charts[scaling.id].data[item.seriesIndex][0].length; n++) {
          values.push(app.charts[scaling.id].tickFormatter(item.datapoint[n].toFixed(1)));
        };
        this.hideToolTip();
        $('<div id="tooltip">' + values.join('<br>') + '</div>').css( {
          position: 'absolute',
          display: 'none',
          top: item.pageY - 35,
          left: item.pageX + 5,
          padding: '5px',
          'background-color': '#ff4',
          opacity: 0.80
        }).appendTo('body').fadeIn(200);
      },

      hideToolTip: function() {
        $('#tooltip').remove();
      }
    },
    
    spinners: {
      init: function() {
        
      }
    }
  }
};

$(function() {
  app.init();
})

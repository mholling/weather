$.extend({
  keys: function(obj) {
    var a = [];
    $.each(obj, function(k){ a.push(k) });
    return a;
  }
});

var app = {
  init: function() {
    this.date.init();
    this.tabs.init();
    this.charts.init();
    this.statistics.init();
    this.sortable.init();
  },
  
  scalings: {
    <%- @scalings.group_by(&:scalable_type).each do |scalable_type, scalings| -%>
      <%- scalings.each do |scaling| -%>
        <%= dom_id(scaling) %>: {
          url: '<%= scaling_path(scaling) %>',
          <%= scaling.scalable_type.underscore %>: {
            url: '<%= send "scaling_#{scalable_type.underscore}_path", scaling, :format => :json %>',
            response: null,
            
            <%- if scalable_type == Chart.name -%>
              tickFormatter: function(value, axis) {
                return value + '<%= scaling.chart.config["units"] %>'
              }
            <%- end -%>
          }
        },
      <%- end -%>
    <%- end -%>
  },
  
  date: {
    init: function() {
      jQuery.getJSON('<%= observation_range_path(:format => :json) %>', function(range) {
        options = {
          changeMonth: true,
          changeYear: true,
          firstDay: 1,
          minDate: new Date(range.minDate),
          maxDate: new Date(range.maxDate),
          onSelect: app.date.changed
        };
        $('#date').datepicker(options);
        app.date.changed();
      });
    },
    
    changed: function(dateText, inst) {
      app.charts.reset();
      app.statistics.reset();
    },
    
    string: function() {
      return $('#date').datepicker('getDate').toDateString();
    }
  },
  
  tabs: {
    init: function() {
      $('#tabs').tabs({
        select: app.tabs.selected
      });
    },
    
    selected: function(event, ui) {
      app.charts.loadScale(ui.index);
      app.statistics.loadScale(ui.index)
    },
    
    selectedTab: function() {
      return $('#tabs').tabs('option', 'selected');
    }
  },
  
  charts: {
    init: function() {
      this.zoom.init();
      this.hover.init();
      this.spinners.init();
    },

    reset: function() {
      <%- @scalings.for(Chart).each do |scaling| -%>
        app.scalings.<%= dom_id(scaling) %>.chart.response = null;
      <%- end -%>
      this.loadScale(app.tabs.selectedTab());
    },

    loadScale: function(tabIndex) {
      this.load($('.scale:eq('+tabIndex+') .scaling.chart'));
    },
    
    load: function(scalings) {
      scalings.each(function(index, scaling) {
        if (app.scalings[scaling.id].chart.response == null) {
          $(scaling).children('.plot').empty();
          url = app.scalings[scaling.id].chart.url+'?date='+encodeURI(app.date.string());
          jQuery.getJSON(url, function(result) {
            app.scalings[scaling.id].chart.response = result;
            app.charts.draw(scaling);
          });
        };
      });
    },
          
    draw: function(scaling, options) {
      opts = $.extend(true, {}, app.scalings[scaling.id].chart.response.options);
      opts = $.extend(true, opts, options || {});
      opts = $.extend(true, opts, {
        yaxis: {
          tickFormatter: app.scalings[scaling.id].chart.tickFormatter
        }
      });
      $.plot($(scaling).find('.plot'), app.scalings[scaling.id].chart.response.data, opts);
    },
    
    zoom: {
      init: function() {
        $('.scaling').bind('plotselected', function(event, ranges) {
          app.charts.zoom.draw($(event.target).parents('.scale').find('.scaling'), ranges);
        });
        $('.scaling').bind('plotunselected', function(event) {
          app.charts.draw($(event.target).parents('.scale').find('.scaling').get(0));
        });
      },
    
      draw: function(scalings, ranges) {
        scalings.each(function(index, scaling) {
          app.charts.draw(scaling, {
            xaxis: {
              min: ranges.xaxis.from,
              max: ranges.xaxis.to
            }
          });          
        });
      }
    },

    hover: {
      dataIndex: null,
      seriesIndex: null,

      init: function() {        
        $('.scaling.chart').bind('plothover', function(event, position, item) {
          app.charts.hover.show($(event.target).parents('.scaling').get(0), item);
        });
      },

      show: function(scaling, item) {
        if (item) {
          if (app.charts.hover.dataIndex != item.dataIndex || app.charts.hover.seriesIndex != item.seriesIndex) {
            this.dataIndex = item.dataIndex;
            this.seriesIndex = item.seriesIndex;
            this.showToolTip(scaling, item);
          };
        } else {
          this.dataIndex = null;
          this.seriesIndex = null;
          this.hideToolTip();
        };
      },

      showToolTip: function(scaling, item) {
        for (values = [], n = 1; n < app.scalings[scaling.id].chart.response.data[item.seriesIndex][0].length; n++) {
          values.push(app.scalings[scaling.id].chart.tickFormatter(item.datapoint[n].toFixed(1)));
        };
        this.hideToolTip();
        $('<div id="tooltip">' + values.join('<br>') + '</div>').css( {
          position: 'absolute',
          display: 'none',
          top: item.pageY - 35,
          left: item.pageX + 5,
          padding: '5px',
          'background-color': '#ff4',
          opacity: 0.80
        }).appendTo('body').fadeIn(200);
      },

      hideToolTip: function() {
        $('#tooltip').remove();
      }
    },
    
    spinners: {
      init: function() {
        
      }
    }
  },
  
  statistics: {
    init: function() {
    },
    
    <%- @scalings.for(Statistic).each do |scaling| -%>
      <%= dom_id(scaling.statistic.becomes Statistic) %>: {
        data: null,
        url: '<%= scaling_statistic_path(scaling, :format => :json) %>',
      },
      
    <%- end -%>
    
    reset: function() {
      <%- @scalings.for(Statistic).each do |scaling| -%>
        this.<%= dom_id(scaling.statistic.becomes Statistic) %>.data = null;
      <%- end -%>
      this.loadScale(app.tabs.selectedTab());
    },
    
    loadScale: function(tabIndex) {
      // this.load($('.scale:eq('+tabIndex+') .charts .scaling'));
    }
  },
  
  sortable: {
    init: function() {
      $('.scalings').sortable({
        handle: '.handle',
        placeholder: 'ui-state-highlight',
        forcePlaceholderSize: true,
        update: function(event, ui) {
          url = app.scalings[ui.item[0].id].url;
          data = {
            _method: 'PUT',
            position: ui.item.parents('.scalings').find('.scaling').index(ui.item)
          };
          $.post(url, data);          
        }
      });
      $('.scalings').disableSelection();
    }
  }
};

$(function() {
  app.init();
})
